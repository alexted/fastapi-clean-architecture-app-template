[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.project_release }}"
description = "{{ cookiecutter.project_description }}"
authors = ["{{ cookiecutter.app_developer }}"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^{{ cookiecutter.app_lang_version }}"
fastapi = "*"
orjson = "*"
uvicorn = "*"
gunicorn = "*"
{% if cookiecutter.use_postgresql|lower == 'y' -%}
psycopg = "*"
SQLAlchemy = {version = "*", extras = ["asyncio"]}
{% endif -%}
{% if cookiecutter.use_alembic|lower == 'y' -%}
alembic = "*"
{% endif -%}
pydantic-settings = "*"
python-json-logger = "*"
sentry-sdk = { version = "*", extras = ["fastapi"] }
prometheus-fastapi-instrumentator = "*"
markdown2 = "*"
inflection = "*"

[tool.poetry.dev-dependencies]
pre-commit = "*"
python-dotenv = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-xdist = "*"
pytest-env = "*"
pytest-cov = "*"
httpx = "*"
mypy = "*"
flake8 = "*"
flake8-broken-line = "*"
flake8-builtins = "*"
flake8-commas = "*"
flake8-comprehensions = "*"
flake8-mutable = "*"
flake8-print = "*"
flake8-cognitive-complexity = "*"
flake8-functions = "*"
flake8-quotes = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "{{ cookiecutter.app_lang_version }}"
ignore_missing_imports = true

[tool.ruff]
src = ["src"]
fix = true
show-fixes = true
output-format = "concise"
line-length = 120
target-version = ['py{{ cookiecutter.app_lang_version|replace(".", "") }}']

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ANN", # flake8-annotations
    "Q",   # flake8-quotes
    "SIM", # flake8-simplify
    "T",   # flake8-type-checking
    "B",   # flake8-bandit
    "C",   # flake8-copyright
    "UP",  # pyupgrade
]
ignore = [
    "D203",
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.isort]
length-sort = true
combine-as-imports = true
order-by-type = true
force-sort-within-sections = true
split-on-trailing-comma = false
section-order = ["future", "standard-library", "fastapi", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
indent-style = "space"
skip-magic-trailing-comma = true
docstring-code-format = true
docstring-code-line-length = 79

[tool.pytest.ini_options]
minversion = "8.2"
asyncio_mode = "auto"
testpaths = "tests"
env = [
    "ENVIRONMENT = TEST",
    #"POSTGRES_DSN = postgresql+psycopg://user:password@localhost:5432/test_db",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]
data_file = "tests/coverage/.coverage"

[tool.coverage.report]
show_missing = true
skip_covered = true
omit = ["tests/*"]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "def logger",
    "def build_spec.*:",
    "except ConnectionRefusedError",
]
