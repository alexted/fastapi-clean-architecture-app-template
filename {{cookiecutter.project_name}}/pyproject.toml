[project]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.project_release }}"
description = "{{ cookiecutter.project_description }}"
authors = [
    {name = "{{ cookiecutter.app_developer }}",email = "dev@email.io"}
]
license = {text = "My Private License"}
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastapi",
    "orjson",
    "granian[pname]",
    "pydantic[email]",
    "pydantic-settings",
    {% if cookiecutter.use_jwt|lower == 'y' -%}
    "pyjwt[crypto]",
    {% endif -%}
    {% if cookiecutter.use_postgresql|lower == 'y' or cookiecutter.use_alembic|lower == 'y' -%}
    "asyncpg",
    {% endif -%}
    {% if cookiecutter.use_postgresql|lower == 'y' -%}
    "sqlalchemy[asyncio]",
    {% endif -%}
    {% if cookiecutter.use_alembic|lower == 'y' -%}
    "alembic",
    {% endif -%}
    "python-json-logger",
    "sentry-sdk[fastapi]",
    "prometheus-fastapi-instrumentator",
    {% if cookiecutter.use_cache|lower == 'y' -%}
    "redis[hiredis]",
    {% endif -%}
    {% if cookiecutter.use_kafka|lower == 'y' -%}
    "aiokafka",
    {% endif -%}
    {% if cookiecutter.use_s3|lower == 'y' -%}
    "aioboto3",
    {% endif -%}
    "python-multipart",
    "httpx",
]

[tool.poetry]
package-mode = false

[dependency-groups]
dev = [
    "watchfiles",
    "ruff",
    "mypy",
    "pytest",
    "pytest-mock",
    "pytest-xdist",
    "pytest-cov",
    "pre-commit",
]

[build-system]
requires = ['setuptools>=68.0.0', 'Cython>=3.0.0']
build-backend = 'setuptools.build_meta'

[tool.mypy]
python_version = "{{ cookiecutter.app_lang_version }}"
ignore_missing_imports = true

[tool.ruff]
src = ["src"]
target-version = "py{{ cookiecutter.app_lang_version|replace('.', '') }}"
line-length = 120
fix = true
unsafe-fixes = true
show-fixes = true
output-format = "grouped"

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "ANN", # flake8-annotations
    "Q", # flake8-quotes
    "SIM", # flake8-simplify
    "T", # flake8-type-checking
    "B", # flake8-bandit
    "C", # flake8-copyright
    "UP", # pyupgrade
]
ignore = [
    "ANN101", # Checks that instance method self arguments have type annotations
    "ANN102", #
    "D203", # one blank line before class, handled by pydocstyle
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.isort]
length-sort = true
combine-as-imports = true
order-by-type = true
force-sort-within-sections = true
split-on-trailing-comma = false
known-first-party = ["src"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
indent-style = "space"
skip-magic-trailing-comma = true
docstring-code-format = true
docstring-code-line-length = 80

[tool.pytest.ini_options]
minversion = "8.3"
testpaths = "tests"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]
data_file = "tests/coverage/.coverage"

[tool.coverage.report]
show_missing = true
skip_covered = true
omit = ["tests/*"]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "def logger",
    "def build_spec.*:",
    "except ConnectionRefusedError",
]
